/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ucdenver.ccp.phenogen.applets.exonviewer;

import edu.ucdenver.ccp.phenogen.applets.data.ExCorFullHeatMapData;
import edu.ucdenver.ccp.phenogen.applets.data.ExCorHeatMapData;
import edu.ucdenver.ccp.phenogen.applets.exonviewer.ExonCorrelationView;
import edu.ucdenver.ccp.phenogen.applets.data.FullHeatMapData;
import edu.ucdenver.ccp.phenogen.applets.data.Gene;
import edu.ucdenver.ccp.phenogen.applets.data.HeatMapData;
import edu.ucdenver.ccp.phenogen.applets.data.ProbeSet;
import edu.ucdenver.ccp.phenogen.applets.data.Transcript;
import edu.ucdenver.ccp.phenogen.applets.data.TranscriptElement;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.Point;
import java.util.ArrayList;
import javax.swing.JComponent;
import javax.swing.JScrollPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author smahaffey
 */
public class MainExonCorPanel extends javax.swing.JPanel {
    
    private ExCorFullHeatMapData fhmd=new ExCorFullHeatMapData();
    private FullHeatMapData nfhmd=new FullHeatMapData();
    private ArrayList<Transcript> transcripts=new ArrayList<Transcript>();
    private Gene[] genes=new Gene[0];
    private Gene selGene=null;
    boolean initComplete=false;
    boolean linkSB=true;

    public void setSelectedGene(Gene selGene) {
        this.selGene=selGene;
    }

    public void setTranscripts(ArrayList<Transcript> transcripts) {
        this.transcripts=transcripts;
    }

    public void setProgressBarVisible(boolean b) {
        this.loadingpb.setVisible(b);
        this.loadinglbl.setVisible(b);
        this.revalidate();
    }

    
    
    
    private static class Corner extends JComponent {
        
        public Corner() {
        }
        protected void paintComponent(Graphics g) {
            // Fill me with dirty brown/orange.
            g.setColor(Color.WHITE);
            g.fillRect(0, 0, getWidth(), getHeight());
        }
        
    }
    /**
     * Creates new form MainExonCorPanel
     */
    public MainExonCorPanel() {
        initComponents();
        errorsp.setVisible(false);
        jSplitPane1.setDividerLocation(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rightScrollPane = new javax.swing.JScrollPane();
        rightHeatMapPanel = new edu.ucdenver.ccp.phenogen.applets.graphics.ExCorHeatMapGraphicsPanel();
        leftColumnTrans = new edu.ucdenver.ccp.phenogen.applets.graphics.FullTranscriptView();
        rightColumnTrans = new edu.ucdenver.ccp.phenogen.applets.graphics.FullTranscriptView();
        leftRowTrans = new edu.ucdenver.ccp.phenogen.applets.graphics.ShortTranscriptView();
        rightRowTrans = new edu.ucdenver.ccp.phenogen.applets.graphics.ShortTranscriptView();
        cornerControlPanel1 = new edu.ucdenver.ccp.phenogen.applets.exonviewer.CornerControlPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        cornerControlPanel2 = new edu.ucdenver.ccp.phenogen.applets.exonviewer.CornerControlPanel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel12 = new javax.swing.JPanel();
        grid = new javax.swing.JPanel();
        leftScrollPane = new javax.swing.JScrollPane();
        leftHeatMapPanel = new edu.ucdenver.ccp.phenogen.applets.graphics.ExCorHeatMapGraphicsPanel();
        geneImgPanel = new javax.swing.JPanel();
        geneImgScrollPane = new javax.swing.JScrollPane();
        urlImgPanel = new edu.ucdenver.ccp.phenogen.applets.graphics.URLImagePanel();
        loadinglbl = new javax.swing.JLabel();
        loadingpb = new javax.swing.JProgressBar();
        errorsp = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        heatMapLegend1 = new edu.ucdenver.ccp.phenogen.applets.graphics.ExCorHeatMapLegend();
        legendHerit = new javax.swing.JPanel();
        legendDabg = new javax.swing.JPanel();
        legendAnnot = new javax.swing.JPanel();
        legendNoProbe = new javax.swing.JPanel();
        legendMasked = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        legendNoProbe1 = new javax.swing.JPanel();
        legendNoProbe2 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        legendNoProbe3 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        eip = new edu.ucdenver.ccp.phenogen.applets.exonviewer.ExonInfoPanel2();

        rightHeatMapPanel.setBackground(new java.awt.Color(255, 255, 255));
        rightHeatMapPanel.setAutoscrolls(true);
        rightHeatMapPanel.setDoubleBuffered(false);
        rightHeatMapPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                rightHeatMapPanelMouseMoved(evt);
            }
        });

        org.jdesktop.layout.GroupLayout rightHeatMapPanelLayout = new org.jdesktop.layout.GroupLayout(rightHeatMapPanel);
        rightHeatMapPanel.setLayout(rightHeatMapPanelLayout);
        rightHeatMapPanelLayout.setHorizontalGroup(
            rightHeatMapPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 686, Short.MAX_VALUE)
        );
        rightHeatMapPanelLayout.setVerticalGroup(
            rightHeatMapPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 481, Short.MAX_VALUE)
        );

        rightScrollPane.setViewportView(rightHeatMapPanel);

        leftColumnTrans.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                leftColumnTransMouseClicked(evt);
            }
        });
        leftColumnTrans.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                leftColumnTransMouseMoved(evt);
            }
        });

        org.jdesktop.layout.GroupLayout leftColumnTransLayout = new org.jdesktop.layout.GroupLayout(leftColumnTrans);
        leftColumnTrans.setLayout(leftColumnTransLayout);
        leftColumnTransLayout.setHorizontalGroup(
            leftColumnTransLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 842, Short.MAX_VALUE)
        );
        leftColumnTransLayout.setVerticalGroup(
            leftColumnTransLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 246, Short.MAX_VALUE)
        );

        rightColumnTrans.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rightColumnTransMouseClicked(evt);
            }
        });
        rightColumnTrans.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                rightColumnTransMouseMoved(evt);
            }
        });

        org.jdesktop.layout.GroupLayout rightColumnTransLayout = new org.jdesktop.layout.GroupLayout(rightColumnTrans);
        rightColumnTrans.setLayout(rightColumnTransLayout);
        rightColumnTransLayout.setHorizontalGroup(
            rightColumnTransLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE)
        );
        rightColumnTransLayout.setVerticalGroup(
            rightColumnTransLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE)
        );

        leftRowTrans.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                leftRowTransMouseClicked(evt);
            }
        });
        leftRowTrans.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                leftRowTransMouseMoved(evt);
            }
        });

        org.jdesktop.layout.GroupLayout leftRowTransLayout = new org.jdesktop.layout.GroupLayout(leftRowTrans);
        leftRowTrans.setLayout(leftRowTransLayout);
        leftRowTransLayout.setHorizontalGroup(
            leftRowTransLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 45, Short.MAX_VALUE)
        );
        leftRowTransLayout.setVerticalGroup(
            leftRowTransLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 200, Short.MAX_VALUE)
        );

        rightRowTrans.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rightRowTransMouseClicked(evt);
            }
        });
        rightRowTrans.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                rightRowTransMouseMoved(evt);
            }
        });

        org.jdesktop.layout.GroupLayout rightRowTransLayout = new org.jdesktop.layout.GroupLayout(rightRowTrans);
        rightRowTrans.setLayout(rightRowTransLayout);
        rightRowTransLayout.setHorizontalGroup(
            rightRowTransLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 45, Short.MAX_VALUE)
        );
        rightRowTransLayout.setVerticalGroup(
            rightRowTransLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 200, Short.MAX_VALUE)
        );

        cornerControlPanel1.setMaximumSize(new java.awt.Dimension(45, 32767));
        cornerControlPanel1.setPreferredSize(new java.awt.Dimension(45, 78));

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/ucdenver/ccp/phenogen/applets/exonviewer/magnifyingGlass_in.png"))); // NOI18N
        jButton1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton1.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                jButton1ComponentAdded(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/ucdenver/ccp/phenogen/applets/exonviewer/magnifyingGlass_out.png"))); // NOI18N
        jButton2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout cornerControlPanel1Layout = new org.jdesktop.layout.GroupLayout(cornerControlPanel1);
        cornerControlPanel1.setLayout(cornerControlPanel1Layout);
        cornerControlPanel1Layout.setHorizontalGroup(
            cornerControlPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jButton2)
            .add(jButton1)
        );
        cornerControlPanel1Layout.setVerticalGroup(
            cornerControlPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(cornerControlPanel1Layout.createSequentialGroup()
                .add(jButton1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton2))
        );

        jButton3.setBackground(new java.awt.Color(255, 255, 255));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/ucdenver/ccp/phenogen/applets/exonviewer/magnifyingGlass_in.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(255, 255, 255));
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/ucdenver/ccp/phenogen/applets/exonviewer/magnifyingGlass_out.png"))); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout cornerControlPanel2Layout = new org.jdesktop.layout.GroupLayout(cornerControlPanel2);
        cornerControlPanel2.setLayout(cornerControlPanel2Layout);
        cornerControlPanel2Layout.setHorizontalGroup(
            cornerControlPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jButton3)
            .add(jButton4)
        );
        cornerControlPanel2Layout.setVerticalGroup(
            cornerControlPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(cornerControlPanel2Layout.createSequentialGroup()
                .add(jButton3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton4))
        );

        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(0);
        jSplitPane1.setDividerSize(5);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setLastDividerLocation(400);
        jSplitPane1.setOneTouchExpandable(true);

        jPanel12.setLayout(new java.awt.BorderLayout());

        grid.setLayout(new java.awt.GridLayout(1, 1));

        leftHeatMapPanel.setBackground(new java.awt.Color(255, 255, 255));
        leftHeatMapPanel.setAutoscrolls(true);
        leftHeatMapPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                leftHeatMapPanelMouseMoved(evt);
            }
        });

        org.jdesktop.layout.GroupLayout leftHeatMapPanelLayout = new org.jdesktop.layout.GroupLayout(leftHeatMapPanel);
        leftHeatMapPanel.setLayout(leftHeatMapPanelLayout);
        leftHeatMapPanelLayout.setHorizontalGroup(
            leftHeatMapPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 2359, Short.MAX_VALUE)
        );
        leftHeatMapPanelLayout.setVerticalGroup(
            leftHeatMapPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 1981, Short.MAX_VALUE)
        );

        leftScrollPane.setViewportView(leftHeatMapPanel);

        grid.add(leftScrollPane);

        jPanel12.add(grid, java.awt.BorderLayout.CENTER);

        geneImgPanel.setMinimumSize(new java.awt.Dimension(0, 200));
        geneImgPanel.setPreferredSize(new java.awt.Dimension(493, 250));

        loadinglbl.setText("Loading...");

        loadingpb.setIndeterminate(true);

        jEditorPane1.setContentType("text/html"); // NOI18N
        jEditorPane1.setText("<html>\n<head></head><body><p style=\\\"margin-top: 0\\\">\n <b>Out of Memory Error:</b>  \nPlease upgrade the Java Runtime Environment from <a href=\\\"http://www.Java.com\\\">http://www.Java.com</a> or if an update is not available (ex. Mac OS X  10.5 and earlier)  Please go to the Java Preferences panel.  Select options and enter -Xmx256M  this will allow 256MegaBytes to be used which should be enough for most genes.\n    </p>\n  </body>\n</html>");
        errorsp.setViewportView(jEditorPane1);

        org.jdesktop.layout.GroupLayout urlImgPanelLayout = new org.jdesktop.layout.GroupLayout(urlImgPanel);
        urlImgPanel.setLayout(urlImgPanelLayout);
        urlImgPanelLayout.setHorizontalGroup(
            urlImgPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(urlImgPanelLayout.createSequentialGroup()
                .add(urlImgPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(urlImgPanelLayout.createSequentialGroup()
                        .add(392, 392, 392)
                        .add(loadinglbl))
                    .add(urlImgPanelLayout.createSequentialGroup()
                        .add(298, 298, 298)
                        .add(loadingpb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 249, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(18, 18, 18)
                .add(errorsp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 252, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );
        urlImgPanelLayout.setVerticalGroup(
            urlImgPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(urlImgPanelLayout.createSequentialGroup()
                .add(urlImgPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(urlImgPanelLayout.createSequentialGroup()
                        .add(35, 35, 35)
                        .add(loadinglbl)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(loadingpb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(urlImgPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(errorsp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 216, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        geneImgScrollPane.setViewportView(urlImgPanel);

        org.jdesktop.layout.GroupLayout geneImgPanelLayout = new org.jdesktop.layout.GroupLayout(geneImgPanel);
        geneImgPanel.setLayout(geneImgPanelLayout);
        geneImgPanelLayout.setHorizontalGroup(
            geneImgPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(geneImgScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 846, Short.MAX_VALUE)
        );
        geneImgPanelLayout.setVerticalGroup(
            geneImgPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, geneImgScrollPane)
        );

        jPanel12.add(geneImgPanel, java.awt.BorderLayout.NORTH);

        heatMapLegend1.setMinimumSize(new java.awt.Dimension(0, 70));
        heatMapLegend1.setPreferredSize(new java.awt.Dimension(950, 70));

        legendHerit.setBackground(new java.awt.Color(0, 51, 255));
        legendHerit.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        legendHerit.setToolTipText("<HTML> This exon has been excluded because the heritability of one or more probesets is below the selected threshold.<BR>\nIf you would like to see the data anyway lower the Heritability threshold or chooe Advanced Display Options and choose to Ignore Heritability.<BR>\n</html>");

        org.jdesktop.layout.GroupLayout legendHeritLayout = new org.jdesktop.layout.GroupLayout(legendHerit);
        legendHerit.setLayout(legendHeritLayout);
        legendHeritLayout.setHorizontalGroup(
            legendHeritLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 19, Short.MAX_VALUE)
        );
        legendHeritLayout.setVerticalGroup(
            legendHeritLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );

        legendDabg.setBackground(new java.awt.Color(0, 153, 51));
        legendDabg.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        legendDabg.setToolTipText("<HTML>This exon has not been included because none of the probesets were detected above background in a high enough percentage of samples.<BR>\nTo view this data decrease the percentage of samples that must be detected above background</html>");

        org.jdesktop.layout.GroupLayout legendDabgLayout = new org.jdesktop.layout.GroupLayout(legendDabg);
        legendDabg.setLayout(legendDabgLayout);
        legendDabgLayout.setHorizontalGroup(
            legendDabgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 19, Short.MAX_VALUE)
        );
        legendDabgLayout.setVerticalGroup(
            legendDabgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );

        legendAnnot.setBackground(new java.awt.Color(255, 153, 51));
        legendAnnot.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        legendAnnot.setToolTipText("<HTML>This exon is excluded because its probesets have been filtered out by the annotation confidence level.<BR>\nTo view data you must change the annotation confidence.</html>");

        org.jdesktop.layout.GroupLayout legendAnnotLayout = new org.jdesktop.layout.GroupLayout(legendAnnot);
        legendAnnot.setLayout(legendAnnotLayout);
        legendAnnotLayout.setHorizontalGroup(
            legendAnnotLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 19, Short.MAX_VALUE)
        );
        legendAnnotLayout.setVerticalGroup(
            legendAnnotLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );

        legendNoProbe.setBackground(new java.awt.Color(255, 0, 0));
        legendNoProbe.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        legendNoProbe.setToolTipText("This exon is excluded because there are no probesets for it.");

        org.jdesktop.layout.GroupLayout legendNoProbeLayout = new org.jdesktop.layout.GroupLayout(legendNoProbe);
        legendNoProbe.setLayout(legendNoProbeLayout);
        legendNoProbeLayout.setHorizontalGroup(
            legendNoProbeLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 19, Short.MAX_VALUE)
        );
        legendNoProbeLayout.setVerticalGroup(
            legendNoProbeLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );

        legendMasked.setBackground(new java.awt.Color(96, 192, 223));
        legendMasked.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        legendMasked.setToolTipText("<html>This exon is excluded because the probesets contained in it have been masked. <BR>\nThey represent a probeset that was removed as being of poor quality.  <BR>\nThere is no way to display data for these.<BR>\n</html>");

        org.jdesktop.layout.GroupLayout legendMaskedLayout = new org.jdesktop.layout.GroupLayout(legendMasked);
        legendMasked.setLayout(legendMaskedLayout);
        legendMaskedLayout.setHorizontalGroup(
            legendMaskedLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 19, Short.MAX_VALUE)
        );
        legendMaskedLayout.setVerticalGroup(
            legendMaskedLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );

        jLabel8.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel8.setText("Included Exon Color:");

        jLabel10.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel10.setText("No Probesets");
        jLabel10.setToolTipText("This exon is excluded because there are no probesets for it.");

        jLabel11.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel11.setText("Masked");
        jLabel11.setToolTipText("toolTipText\t<html>This exon is excluded because the probesets contained in it have been masked. <BR> They represent a probeset that was removed as being of poor quality.  <BR> There is no way to display data for these.<BR> </html>");

        jLabel12.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel12.setText("Heritability");
        jLabel12.setToolTipText("<HTML> This exon has been excluded because the heritability of one or more probesets is below the selected threshold.<BR> If you would like to see the data anyway lower the Heritability threshold or chooe Advanced Display Options and choose to Ignore Heritability.<BR> </html>");

        jLabel13.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel13.setText("<HTML>Annotation<BR>Confidence</html>");
        jLabel13.setToolTipText("toolTipText\t<HTML>This exon is excluded because its probesets have been filtered out by the annotation confidence level.<BR> To view data you must change the annotation confidence.</html>");

        jLabel14.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel14.setText("Not DABG");
        jLabel14.setToolTipText("toolTipText\t<HTML>This exon has not been included because none of the probesets were detected above background in a high enough percentage of samples.<BR> To view this data decrease the percentage of samples that must be detected above background</html>");

        legendNoProbe1.setBackground(new java.awt.Color(204, 204, 204));
        legendNoProbe1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        legendNoProbe1.setToolTipText("This represents the protein coding portion of an exon included in the heatmap.");

        org.jdesktop.layout.GroupLayout legendNoProbe1Layout = new org.jdesktop.layout.GroupLayout(legendNoProbe1);
        legendNoProbe1.setLayout(legendNoProbe1Layout);
        legendNoProbe1Layout.setHorizontalGroup(
            legendNoProbe1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 19, Short.MAX_VALUE)
        );
        legendNoProbe1Layout.setVerticalGroup(
            legendNoProbe1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );

        legendNoProbe2.setBackground(new java.awt.Color(255, 255, 255));
        legendNoProbe2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        legendNoProbe2.setToolTipText("This represents the non-protein coding portion of an exon that is represented in the heat map.");

        org.jdesktop.layout.GroupLayout legendNoProbe2Layout = new org.jdesktop.layout.GroupLayout(legendNoProbe2);
        legendNoProbe2.setLayout(legendNoProbe2Layout);
        legendNoProbe2Layout.setHorizontalGroup(
            legendNoProbe2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 19, Short.MAX_VALUE)
        );
        legendNoProbe2Layout.setVerticalGroup(
            legendNoProbe2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );

        jLabel15.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel15.setText("<HTML>Protein<BR>Coding</html>");
        jLabel15.setToolTipText("This represents the protein coding portion of an exon included in the heatmap.");

        jLabel16.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel16.setText("<HTML>Non-Protein<BR>Coding</html>");
        jLabel16.setToolTipText("This represents the non-protein coding portion of an exon that is represented in the heat map.");

        jLabel17.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel17.setText("Excluded Exons:");
        jLabel17.setToolTipText("Colors that represent the reasons exons are exlcluded from the heatmap.");

        legendNoProbe3.setBackground(new java.awt.Color(255, 255, 153));
        legendNoProbe3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        legendNoProbe3.setToolTipText("<HTML>This exon has been excluded for multiple reasons.<BR> Please click on the exon or hold the mouse over the exon to see a list of reasons this exon has been excluded.</html>");

        org.jdesktop.layout.GroupLayout legendNoProbe3Layout = new org.jdesktop.layout.GroupLayout(legendNoProbe3);
        legendNoProbe3.setLayout(legendNoProbe3Layout);
        legendNoProbe3Layout.setHorizontalGroup(
            legendNoProbe3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 19, Short.MAX_VALUE)
        );
        legendNoProbe3Layout.setVerticalGroup(
            legendNoProbe3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );

        jLabel18.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel18.setText("<html>Multiple<BR>Reasons</html>");
        jLabel18.setToolTipText("<HTML>This exon has been excluded for multiple reasons.<BR> Please click on the exon or hold the mouse over the exon to see a list of reasons this exon has been excluded.</html>");

        org.jdesktop.layout.GroupLayout heatMapLegend1Layout = new org.jdesktop.layout.GroupLayout(heatMapLegend1);
        heatMapLegend1.setLayout(heatMapLegend1Layout);
        heatMapLegend1Layout.setHorizontalGroup(
            heatMapLegend1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(heatMapLegend1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel8)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(legendNoProbe1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(legendNoProbe2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jLabel17)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(legendNoProbe, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel10)
                .add(18, 18, 18)
                .add(legendMasked, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel11)
                .add(18, 18, 18)
                .add(legendHerit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel12)
                .add(18, 18, 18)
                .add(legendAnnot, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(legendDabg, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel14)
                .add(18, 18, 18)
                .add(legendNoProbe3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        heatMapLegend1Layout.setVerticalGroup(
            heatMapLegend1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(heatMapLegend1Layout.createSequentialGroup()
                .addContainerGap()
                .add(heatMapLegend1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(legendNoProbe3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(legendNoProbe2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(legendNoProbe1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(legendMasked, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(legendNoProbe, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(legendAnnot, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(legendDabg, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(legendHerit, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jLabel18)
                    .add(jLabel14, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jLabel13)
                    .add(jLabel12, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jLabel11, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jLabel10, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jLabel15)
                    .add(jLabel8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel16)
                    .add(jLabel17, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jPanel12.add(heatMapLegend1, java.awt.BorderLayout.SOUTH);

        jSplitPane1.setBottomComponent(jPanel12);
        jSplitPane1.setLeftComponent(eip);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    
    private void zoomIn(){
        if(currentDim*0.20<1){
            currentDim++;
        }else{
            currentDim=(int) (currentDim+currentDim*0.20);
        }
        this.graphicsRevalidate();
        
    }
    
    private void zoomOut(){
        currentDim=(int) (currentDim-currentDim*0.20);
        if(currentDim<10){
            currentDim=10;
        }
        this.graphicsRevalidate();
        
    }
    
    private void leftHeatMapPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leftHeatMapPanelMouseMoved
        leftHeatMapPanel.setToolTipText(evt.getPoint());
    }//GEN-LAST:event_leftHeatMapPanelMouseMoved

    private void leftColumnTransMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leftColumnTransMouseClicked
        TranscriptElement elem=leftColumnTrans.getExonMouseIsOver(evt.getPoint());
        if(elem!=null){
           eip.setElement(elem,selGene);
            jSplitPane1.setTopComponent(eip);
            jSplitPane1.setDividerLocation(400);
            eip.setVisible(true);
        }
    }//GEN-LAST:event_leftColumnTransMouseClicked

    private void leftColumnTransMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leftColumnTransMouseMoved
        TranscriptElement elem=leftColumnTrans.getExonMouseIsOver(evt.getPoint());
        if(elem!=null){
            this.leftColumnTrans.setToolTipText(elem.getToolTipText());
        }
    }//GEN-LAST:event_leftColumnTransMouseMoved

    private void leftRowTransMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leftRowTransMouseClicked
        TranscriptElement elem=leftRowTrans.getElementMouseIsOver(evt.getPoint());
        if(elem!=null){
            eip.setElement(elem,selGene);
            jSplitPane1.setTopComponent(eip);
            jSplitPane1.setDividerLocation(400);
            eip.setVisible(true);
        }
    }//GEN-LAST:event_leftRowTransMouseClicked

    private void leftRowTransMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leftRowTransMouseMoved
        TranscriptElement elem=leftRowTrans.getElementMouseIsOver(evt.getPoint());
        if(elem!=null){
            this.leftRowTrans.setToolTipText(elem.getToolTipText());
        }
    }//GEN-LAST:event_leftRowTransMouseMoved

    private void rightHeatMapPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rightHeatMapPanelMouseMoved
        rightHeatMapPanel.setToolTipText(evt.getPoint());

    }//GEN-LAST:event_rightHeatMapPanelMouseMoved

    private void rightRowTransMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rightRowTransMouseClicked
        TranscriptElement elem=rightRowTrans.getElementMouseIsOver(evt.getPoint());
        if(elem!=null){
            eip.setElement(elem,selGene);
            jSplitPane1.setTopComponent(eip);
            jSplitPane1.setDividerLocation(400);
            eip.setVisible(true);
        }
    }//GEN-LAST:event_rightRowTransMouseClicked

    private void rightRowTransMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rightRowTransMouseMoved
        TranscriptElement elem=rightRowTrans.getElementMouseIsOver(evt.getPoint());
        if(elem!=null){
            this.rightRowTrans.setToolTipText(elem.getToolTipText());
        }
    }//GEN-LAST:event_rightRowTransMouseMoved

    private void rightColumnTransMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rightColumnTransMouseClicked
        TranscriptElement elem=rightColumnTrans.getExonMouseIsOver(evt.getPoint());
        if(elem!=null){
            eip.setElement(elem,selGene);
            jSplitPane1.setTopComponent(eip);
            jSplitPane1.setDividerLocation(400);
            eip.setVisible(true);
        }
    }//GEN-LAST:event_rightColumnTransMouseClicked

    private void rightColumnTransMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rightColumnTransMouseMoved
        TranscriptElement elem=rightColumnTrans.getExonMouseIsOver(evt.getPoint());
        if(elem!=null){
            this.rightColumnTrans.setToolTipText(elem.getToolTipText());
        }
    }//GEN-LAST:event_rightColumnTransMouseMoved

    private void jButton1ComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_jButton1ComponentAdded
        this.zoomIn();
    }//GEN-LAST:event_jButton1ComponentAdded

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.zoomOut();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.zoomOut();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.zoomIn();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.zoomIn();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void graphicsRevalidate(){
        leftColumnTrans.setCurDim(currentDim);
        leftColumnTrans.repaint();
        leftColumnTrans.revalidate();
        rightColumnTrans.setCurDim(currentDim);
        rightColumnTrans.repaint();
        rightColumnTrans.revalidate();
        leftHeatMapPanel.setCurDim(currentDim);
        leftRowTrans.setCurDim(currentDim);
        leftRowTrans.repaint();
        leftRowTrans.revalidate();
        rightRowTrans.setCurDim(currentDim);
        rightRowTrans.repaint();
        rightRowTrans.revalidate();
        leftHeatMapPanel.repaint();
        leftHeatMapPanel.revalidate();
        rightHeatMapPanel.setCurDim(currentDim);
        rightHeatMapPanel.repaint();
        rightHeatMapPanel.revalidate();
        leftScrollPane.revalidate();
        rightScrollPane.revalidate();
    }
    
    public void setup(ExCorFullHeatMapData fhmdIn, Gene[] genesIn, boolean outOfMem,String mainEnsemblID,String imageURL,int mainGeneIndex) {
        if (outOfMem) {
            loadingpb.setVisible(false);
            loadinglbl.setVisible(false);
            errorsp.setVisible(true);
        } else {
            //while (!initComplete) {
            //    System.out.println("Download complete waiting init");
            //}
            
            imgURLbase = imageURL;
            String curImgURL = "";
            String genelbltxt = "";
            fhmd = fhmdIn;//ReadDataFiles.readHeatMaps(heatfile);
            genes = genesIn;//ReadDataFiles.readGenes(genefile);
            loadingpb.setVisible(false);
            loadinglbl.setVisible(false);
            
            if (genes != null && genes.length > 0) {
                
                curImgURL = imgURLbase + "/" + genes[mainGeneIndex].getGeneID() + ".png";
                genelbltxt = genes[mainGeneIndex].getGeneID() + "(" + genes[mainGeneIndex].getGeneSymbol() + ")";
                /*
                 * for (int i = 0; i < transcripts.size(); i++) {
                 * leftTranscriptcb.addItem(transcripts.get(i).getID());
                 * rightTranscriptcb.addItem(transcripts.get(i).getID()); }
                 */
                leftColumnTrans.setTranscript(transcripts.get(0), false);
                leftRowTrans.setTranscript(transcripts.get(0), false);
                if (!curImgURL.equals("")) {
                    //genelbl.setText(genelbltxt);
                    urlImgPanel.setURL(curImgURL, genelbltxt);
                }
                Dimension dim = geneImgPanel.getSize();
                int height = urlImgPanel.getHeight();
                if (height < 250) {
                    dim.setSize(dim.getWidth(), height);
                } else {
                    dim.setSize(dim.getWidth(), 250);
                }
                geneImgPanel.setPreferredSize(dim);
                geneImgScrollPane.revalidate();

                System.out.println("Start initial heatmap");
                ExCorHeatMapData hmd = fhmd.generateMap(transcripts.get(0).getProbeSetList("core", "1.0", "0.33", false, false, false, false));
                leftHeatMapPanel.setHeatMapData(hmd);
            }


            //transcripts.get(0).setExcluded(leftHeatMapPanel.getHmd().getExcludedProbes());


            int curLen = transcripts.get(0).getIncludedElemLength(false);
            if (curLen <= 0) {
                curLen = transcripts.get(0).getExonLength();
            }
            int possDim = (int) 960 / curLen;
            if (possDim >= 10) {
                currentDim = possDim;
            }
            leftScrollPane.getViewport().addChangeListener(new ChangeListener() {

                public void stateChanged(ChangeEvent e) {
                    if (linkSB) {
                        Point p = leftScrollPane.getViewport().getViewPosition();
                        rightScrollPane.getViewport().setViewPosition(p);
                    }
                }
            });

            rightScrollPane.getViewport().addChangeListener(new ChangeListener() {

                public void stateChanged(ChangeEvent e) {
                    if (linkSB) {
                        Point p = rightScrollPane.getViewport().getViewPosition();
                        leftScrollPane.getViewport().setViewPosition(p);
                    }
                }
            });
            leftColumnTrans.setCurDim(currentDim);
            rightColumnTrans.setCurDim(currentDim);
            leftRowTrans.setCurDim(currentDim);
            rightRowTrans.setCurDim(currentDim);
            leftHeatMapPanel.setCurDim(currentDim);
            rightHeatMapPanel.setCurDim(currentDim);
            leftScrollPane.setColumnHeaderView(leftColumnTrans);
            leftScrollPane.setRowHeaderView(leftRowTrans);
            rightScrollPane.setColumnHeaderView(rightColumnTrans);
            rightScrollPane.setRowHeaderView(rightRowTrans);
            rightScrollPane.setCorner(JScrollPane.UPPER_LEFT_CORNER, cornerControlPanel2);
            rightScrollPane.setCorner(JScrollPane.LOWER_LEFT_CORNER, new Corner());
            rightScrollPane.setCorner(JScrollPane.UPPER_RIGHT_CORNER, new Corner());
            leftScrollPane.setCorner(JScrollPane.UPPER_LEFT_CORNER, cornerControlPanel1);
            leftScrollPane.setCorner(JScrollPane.LOWER_LEFT_CORNER, new Corner());
            leftScrollPane.setCorner(JScrollPane.UPPER_RIGHT_CORNER, new Corner());
            this.graphicsRevalidate();
            //this.validate(); 
        }
                        
    }
    
    public void setHeatMap(ExCorFullHeatMapData fhmdIn,String geneID,String geneGS,ArrayList<Transcript> trans) {
        
          
            String genelbltxt = "";
            fhmd = fhmdIn;//ReadDataFiles.readHeatMaps(heatfile);
            
            transcripts=trans;
            
            loadingpb.setVisible(false);
            loadinglbl.setVisible(false);
            errorsp.setVisible(false);
            genelbltxt = geneID + "(" + geneGS + ")";
              
                leftColumnTrans.setTranscript(transcripts.get(0), false);
                leftRowTrans.setTranscript(transcripts.get(0), false);
                

                System.out.println("Start initial heatmap");
                ExCorHeatMapData hmd = fhmd.generateMap(transcripts.get(0).getProbeSetList("core", "1.0", "0.33", false, false, false, false));
                leftHeatMapPanel.setHeatMapData(hmd);


            int curLen = transcripts.get(0).getIncludedElemLength(false);
            if (curLen <= 0) {
                curLen = transcripts.get(0).getExonLength();
            }
            int possDim = (int) 960 / curLen;
            /*if (possDim >= 10) {
                currentDim = possDim;
            }*/
            leftScrollPane.getViewport().addChangeListener(new ChangeListener() {

                public void stateChanged(ChangeEvent e) {
                    if (linkSB) {
                        Point p = leftScrollPane.getViewport().getViewPosition();
                        rightScrollPane.getViewport().setViewPosition(p);
                    }
                }
            });

            rightScrollPane.getViewport().addChangeListener(new ChangeListener() {

                public void stateChanged(ChangeEvent e) {
                    if (linkSB) {
                        Point p = rightScrollPane.getViewport().getViewPosition();
                        leftScrollPane.getViewport().setViewPosition(p);
                    }
                }
            });
            leftColumnTrans.setCurDim(currentDim);
            rightColumnTrans.setCurDim(currentDim);
            leftRowTrans.setCurDim(currentDim);
            rightRowTrans.setCurDim(currentDim);
            leftHeatMapPanel.setCurDim(currentDim);
            rightHeatMapPanel.setCurDim(currentDim);
            leftScrollPane.setColumnHeaderView(leftColumnTrans);
            leftScrollPane.setRowHeaderView(leftRowTrans);
            rightScrollPane.setColumnHeaderView(rightColumnTrans);
            rightScrollPane.setRowHeaderView(rightRowTrans);
            rightScrollPane.setCorner(JScrollPane.UPPER_LEFT_CORNER, cornerControlPanel2);
            rightScrollPane.setCorner(JScrollPane.LOWER_LEFT_CORNER, new Corner());
            rightScrollPane.setCorner(JScrollPane.UPPER_RIGHT_CORNER, new Corner());
            leftScrollPane.setCorner(JScrollPane.UPPER_LEFT_CORNER, cornerControlPanel1);
            leftScrollPane.setCorner(JScrollPane.LOWER_LEFT_CORNER, new Corner());
            leftScrollPane.setCorner(JScrollPane.UPPER_RIGHT_CORNER, new Corner());
            this.graphicsRevalidate();
            //this.validate(); 
        
                        
    }
    
    public void updateRightMap(int selIndex,String annotString,String dabgTxt,String heritTxt,boolean opStrand,boolean dabgNA,boolean heritNA,boolean intron){
        if (selIndex > 0&&transcripts.size()>0) {
            ArrayList<ProbeSet> tmpProbeList = transcripts.get(selIndex - 1).getProbeSetList(annotString,dabgTxt,heritTxt,opStrand,dabgNA,heritNA,intron);
            this.rightHeatMapPanel.setHeatMapData(fhmd.generateMap(tmpProbeList));
            //transcripts.get(rightTranscriptcb.getSelectedIndex() - 1).setExcluded(rightHeatMapPanel.getHmd().getExcludedProbes());
            rightColumnTrans.setTranscript(transcripts.get(selIndex - 1),intron);
            rightColumnTrans.setCurDim(currentDim);
            rightRowTrans.setTranscript(transcripts.get(selIndex - 1),intron);
            rightRowTrans.setCurDim(currentDim);
            rightColumnTrans.repaint();
            rightRowTrans.repaint();
            this.rightColumnTrans.revalidate();
            this.rightRowTrans.revalidate();
            grid.setLayout(new GridLayout(1, 2));
            grid.add(rightScrollPane);
            rightHeatMapPanel.repaint();
            rightHeatMapPanel.revalidate();
            rightScrollPane.repaint();
            rightScrollPane.revalidate();
        } else if (selIndex == 0) {
            grid.remove(rightScrollPane);
            grid.setLayout(new GridLayout(1, 1));
        }
        grid.revalidate();
    }
    
    public void updateLeftMap(int selIndex,String annotString,String dabgTxt,String heritTxt,boolean opStrand,boolean dabgNA,boolean heritNA,boolean intron){
        if (selIndex > -1&&transcripts.size()>0) {
            ArrayList<ProbeSet> tmpProbeList;
            tmpProbeList = transcripts.get(selIndex).getProbeSetList(annotString,dabgTxt,heritTxt,opStrand,dabgNA,heritNA,intron);
            this.leftHeatMapPanel.setHeatMapData(fhmd.generateMap(tmpProbeList));
            //transcripts.get(leftTranscriptcb.getSelectedIndex()).setExcluded(leftHeatMapPanel.getHmd().getExcludedProbes());

            leftColumnTrans.setTranscript(transcripts.get(selIndex),intron);
            leftRowTrans.setTranscript(transcripts.get(selIndex),intron);
            leftColumnTrans.repaint();
            leftRowTrans.repaint();
            this.leftColumnTrans.revalidate();
            this.leftRowTrans.revalidate();
            leftHeatMapPanel.repaint();
            leftHeatMapPanel.revalidate();
            leftScrollPane.repaint();
            leftScrollPane.revalidate();
        }
        grid.revalidate();
    }
    
    public void setURL(String curImgURL,String genelbltxt){
        urlImgPanel.setURL(curImgURL,genelbltxt);
        Dimension dim=geneImgPanel.getSize();
        int height=urlImgPanel.getHeight();
        if(height<250){
            dim.setSize(dim.getWidth(), height);
        }else{
            dim.setSize(dim.getWidth(), 250);
        }
        geneImgPanel.setPreferredSize(dim);
        geneImgScrollPane.revalidate();
    }
    
    public void filter(int lselIndex,int rselIndex,String annotString,String dabgTxt,String heritTxt,boolean opStrand,boolean dabgNA,boolean heritNA,boolean intron){
        updateLeftMap(lselIndex,annotString,dabgTxt,heritTxt,opStrand,dabgNA,heritNA,intron);
        updateRightMap(rselIndex,annotString,dabgTxt,heritTxt,opStrand,dabgNA,heritNA,intron);
        if(eip.isVisible()){
           eip.updateExonInfo();
        }
        this.graphicsRevalidate();
    }
    
    public void setLinkSB(boolean linkSB){
        this.linkSB=linkSB;
        if(linkSB){
            Point p = leftScrollPane.getViewport().getViewPosition();
            rightScrollPane.getViewport().setViewPosition(p);
        }
    }
    
    public void hideError(){
        errorsp.setVisible(false);
    }
    
    public void setLoadingLblText(String text){
        loadinglbl.setText(text);
        loadinglbl.setVisible(true);
        this.revalidate();
    }
    
    public void hideEIP(){
        eip.setVisible(false);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private edu.ucdenver.ccp.phenogen.applets.exonviewer.CornerControlPanel cornerControlPanel1;
    private edu.ucdenver.ccp.phenogen.applets.exonviewer.CornerControlPanel cornerControlPanel2;
    private edu.ucdenver.ccp.phenogen.applets.exonviewer.ExonInfoPanel2 eip;
    private javax.swing.JScrollPane errorsp;
    private javax.swing.JPanel geneImgPanel;
    private javax.swing.JScrollPane geneImgScrollPane;
    private javax.swing.JPanel grid;
    private edu.ucdenver.ccp.phenogen.applets.graphics.ExCorHeatMapLegend heatMapLegend1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JSplitPane jSplitPane1;
    private edu.ucdenver.ccp.phenogen.applets.graphics.FullTranscriptView leftColumnTrans;
    private edu.ucdenver.ccp.phenogen.applets.graphics.ExCorHeatMapGraphicsPanel leftHeatMapPanel;
    private edu.ucdenver.ccp.phenogen.applets.graphics.ShortTranscriptView leftRowTrans;
    private javax.swing.JScrollPane leftScrollPane;
    private javax.swing.JPanel legendAnnot;
    private javax.swing.JPanel legendDabg;
    private javax.swing.JPanel legendHerit;
    private javax.swing.JPanel legendMasked;
    private javax.swing.JPanel legendNoProbe;
    private javax.swing.JPanel legendNoProbe1;
    private javax.swing.JPanel legendNoProbe2;
    private javax.swing.JPanel legendNoProbe3;
    private javax.swing.JLabel loadinglbl;
    private javax.swing.JProgressBar loadingpb;
    private edu.ucdenver.ccp.phenogen.applets.graphics.FullTranscriptView rightColumnTrans;
    private edu.ucdenver.ccp.phenogen.applets.graphics.ExCorHeatMapGraphicsPanel rightHeatMapPanel;
    private edu.ucdenver.ccp.phenogen.applets.graphics.ShortTranscriptView rightRowTrans;
    private javax.swing.JScrollPane rightScrollPane;
    private edu.ucdenver.ccp.phenogen.applets.graphics.URLImagePanel urlImgPanel;
    // End of variables declaration//GEN-END:variables

    String imgURLbase="";
    private int currentDim=20;
}
